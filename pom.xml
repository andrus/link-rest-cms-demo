<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.objectstyle</groupId>
	<artifactId>link-rest-cms-demo</artifactId>
	<version>1.0-SNAPSHOT</version>

	<name>Webapp: link-rest-cms-demo</name>
	<description>A simple JAX RS project demonstrating the use of LinkRest framework</description>
	<packaging>war</packaging>

	<properties>

		<!-- standard Maven properties -->

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Custom properties (mostly framework versions) -->

		<servlet-api-version>3.1.0</servlet-api-version>
		<slf4j-version>1.7.10</slf4j-version>
		<link-rest-version>1.14-SNAPSHOT</link-rest-version>
		<cayenne-version>4.0.M2</cayenne-version>
		<jersey-version>2.16</jersey-version>
	</properties>

	<scm>
		<connection>scm:git:https://github.com/andrus/link-rest-cms-demo.git</connection>
		<developerConnection>scm:git:ssh://git@github.com:andrus/link-rest-cms-demo.git</developerConnection>
		<url>https://github.com/andrus/link-rest-cms-demo</url>
		<tag>HEAD</tag>
	</scm>

	<repositories>
		<!-- TODO: LinkRest will soon be in Central per https://issues.sonatype.org/browse/OSSRH-13982 
			So 'linkrest-releases' repo reference will become unneeded... -->
		<repository>
			<id>linkrest-releases</id>
			<name>Deployment Repository</name>
			<url>http://maven.objectstyle.org/nexus/content/repositories/linkrestreleases</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<!-- TODO: Cayenne 4.0.M2 will soon be posted to Central, So 'cayenne-staging' 
			repo reference will become unneeded... -->
		<repository>
			<id>cayenne-staging</id>
			<name>Link Rest Dependencies Repo</name>
			<url>https://repository.apache.org/content/repositories/orgapachecayenne-1005/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>


	</repositories>
	<pluginRepositories>
		<!-- TODO: Cayenne 4.0.M2 will soon be posted to Central, So 'cayenne-staging' 
			repo reference will become unneeded... -->
		<pluginRepository>
			<id>cayenne-staging</id>
			<name>Link Rest Dependencies Repo</name>
			<url>https://repository.apache.org/content/repositories/orgapachecayenne-1005/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>com.nhl.link.rest</groupId>
				<artifactId>link-rest</artifactId>
				<version>${link-rest-version}</version>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api-version}</version>
			</dependency>

			<dependency>
				<artifactId>javax.inject</artifactId>
				<groupId>javax.inject</groupId>
				<version>1</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

			<dependency>
				<groupId>javax.ws.rs</groupId>
				<artifactId>javax.ws.rs-api</artifactId>
				<version>2.0.1</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jersey.containers</groupId>
				<artifactId>jersey-container-servlet</artifactId>
				<version>${jersey-version}</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jersey.test-framework</groupId>
				<artifactId>jersey-test-framework-core</artifactId>
				<version>${jersey-version}</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jersey.test-framework.providers</groupId>
				<artifactId>jersey-test-framework-provider-inmemory</artifactId>
				<version>${jersey-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cayenne</groupId>
				<artifactId>cayenne-server</artifactId>
				<version>${cayenne-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.derby</groupId>
				<artifactId>derby</artifactId>
				<version>10.10.1.1</version>
			</dependency>

		</dependencies>
	</dependencyManagement>



	<dependencies>

		<!-- required runtime dependencies -->
		<dependency>
			<groupId>com.nhl.link.rest</groupId>
			<artifactId>link-rest</artifactId>
		</dependency>
		<dependency>
			<artifactId>javax.inject</artifactId>
			<groupId>javax.inject</groupId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cayenne</groupId>
			<artifactId>cayenne-server</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>compile</scope>
		</dependency>
		<!-- providing slf4j binding for use with unit tests that require SLF and 
			for clean Cayenne output. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
		</dependency>

		<!-- Provided dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>

		<!-- unit test deps -->
		<!-- TODO -->

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<warName>link-rest-cms-demo</warName>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.cayenne.plugins</groupId>
					<artifactId>maven-cayenne-plugin</artifactId>
					<version>${cayenne-version}</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>

			<!-- Generate Cayenne classes in Maven; of course you can do the same 
				using Modeler -->
			<plugin>
				<groupId>org.apache.cayenne.plugins</groupId>
				<artifactId>maven-cayenne-plugin</artifactId>
				<configuration>
					<map>${project.basedir}/src/main/resources/datamap.map.xml</map>
				</configuration>
				<executions>
					<execution>
						<id>default-cli</id>
						<goals>
							<goal>cgen</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>



</project>
